# Copyright (c) 2024, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

header = """
/*
 * Copyright (c) 2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * NOTE: this file is generated by search_single_cta_00_generate.py
 *
 * Make changes there and run in this directory:
 *
 * > python search_single_cta_00_generate.py
 *
 */

#include <raft/neighbors/detail/cagra/search_single_cta_kernel-inl.cuh>
#include <raft/neighbors/detail/cagra/compute_distance_vpq.cuh>
#include <raft/neighbors/sample_filter_types.hpp>

#define COMMA ,

namespace raft::neighbors::cagra::detail::single_cta_search {

#define instantiate_single_cta_select_and_run(                                                  \\
  TEAM_SIZE, MAX_DATASET_DIM, DATASET_DESC_T, SAMPLE_FILTER_T)                                  \\
  template void                                                                                 \\
  select_and_run<TEAM_SIZE, MAX_DATASET_DIM, DATASET_DESC_T, SAMPLE_FILTER_T>(                  \\
    DATASET_DESC_T dataset_desc,                                                                \\
    raft::device_matrix_view<const typename DATASET_DESC_T::INDEX_T, int64_t, row_major> graph, \\
    typename DATASET_DESC_T::INDEX_T* topk_indices_ptr,                                         \\
    typename DATASET_DESC_T::DISTANCE_T* topk_distances_ptr,                                    \\
    const typename DATASET_DESC_T::DATA_T* queries_ptr,                                         \\
    const uint32_t num_queries,                                                                 \\
    const typename DATASET_DESC_T::INDEX_T* dev_seed_ptr,                                       \\
    uint32_t* num_executed_iterations,                                                          \\
    uint32_t topk,                                                                              \\
    uint32_t num_itopk_candidates,                                                              \\
    uint32_t block_size,                                                                        \\
    uint32_t smem_size,                                                                         \\
    int64_t hash_bitlen,                                                                        \\
    typename DATASET_DESC_T::INDEX_T* hashmap_ptr,                                              \\
    size_t small_hash_bitlen,                                                                   \\
    size_t small_hash_reset_interval,                                                           \\
    uint32_t num_random_samplings,                                                              \\
    uint64_t rand_xor_mask,                                                                     \\
    uint32_t num_seeds,                                                                         \\
    size_t itopk_size,                                                                          \\
    size_t search_width,                                                                        \\
    size_t min_iterations,                                                                      \\
    size_t max_iterations,                                                                      \\
    SAMPLE_FILTER_T sample_filter,                                                              \\
    cudaStream_t stream);

"""

trailer = """
#undef instantiate_single_cta_search_kernel

}  // namespace raft::neighbors::cagra::detail::single_cta_search
"""

mxdim_team = [(128, 8), (256, 16), (512, 32), (1024, 32)]
# block = [(64, 16), (128, 8), (256, 4), (512, 2), (1024, 1)]
# itopk_candidates = [64, 128, 256]
# itopk_size = [64, 128, 256, 512]
# mxelem = [64, 128, 256]

pq_bits = [8]
subspace_dims = [2, 4]

# rblock = [(256, 4), (512, 2), (1024, 1)]
# rcandidates = [32]
# rsize = [256, 512]
code_book_types = ["half"]

search_types = dict(
    float_uint32=("float", "uint32_t", "float"),  # data_t, idx_t, distance_t
    half_uint32=("half", "uint32_t", "float"),
    int8_uint32=("int8_t", "uint32_t", "float"),
    uint8_uint32=("uint8_t", "uint32_t", "float"),
    float_uint64=("float", "uint64_t", "float"),
    half_uint64=("half", "uint64_t", "float"),
)

# knn
for type_path, (data_t, idx_t, distance_t) in search_types.items():
    for (mxdim, team) in mxdim_team:
        for code_book_t in code_book_types:
            for subspace_dim in subspace_dims:
                for pq_bit in pq_bits:
                    path = f"q_search_single_cta_{type_path}_dim{mxdim}_t{team}_{pq_bit}pq_{subspace_dim}subd_{code_book_t}.cu"
                    with open(path, "w") as f:
                        f.write(header)
                        f.write(
                                f"instantiate_single_cta_select_and_run(\n  {team}, {mxdim}, raft::neighbors::cagra::detail::cagra_q_dataset_descriptor_t<{data_t} COMMA {code_book_t} COMMA {pq_bit} COMMA {subspace_dim} COMMA 0 COMMA {distance_t} COMMA {idx_t} COMMA 0>, raft::neighbors::filtering::none_cagra_sample_filter);\n"
                        )

                        f.write(trailer)
                        # For pasting into CMakeLists.txt
                        print(f"src/neighbors/detail/cagra/{path}")
